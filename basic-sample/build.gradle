def hasGoogleServices = file("${project.rootDir}/basic-sample/google-services.json").exists()

apply plugin: 'com.android.application'
if (hasGoogleServices) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.appdistribution'
}

apply from: 'build-version.gradle'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    namespace 'cz.trask.zenid.sample'
    compileSdk 35

    defaultConfig {
        applicationId "cz.trask.zenid.sample"
        minSdkVersion 21
        targetSdkVersion 35
        ndkVersion "27.1.12297006"
        versionCode readVersionCode()
        versionName project.version.toString()
    }

    buildTypes {
        debug {
            // minifyEnabled true
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            // ndk { abiFilters 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a' } // Generate code for a specific ABI
            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'my-proguard.txt'
            buildConfigField("java.lang.String", "ZENID_URL", "\"" + properties["zenid_url"] + "\"")
            buildConfigField("java.lang.String", "ZENID_APIKEY", "\"" + properties["zenid_apikey"] + "\"")
        }

        release {
//            minifyEnabled true
            signingConfig signingConfigs.debug
            // ndk { abiFilters 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a' } // Generate code for a specific ABI
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'my-proguard.txt'
            buildConfigField("java.lang.String", "ZENID_URL", "\"" + properties["zenid_url"] + "\"")
            buildConfigField("java.lang.String", "ZENID_APIKEY", "\"" + properties["zenid_apikey"] + "\"")
            if (hasGoogleServices) {
                firebaseAppDistribution {
                    serviceCredentialsFile = file("$rootDir/basic-sample/zenid-sample-app-firebase-adminsdk-nlrew-3391d15610.json")
                    groups = "ZenID"
                }
            }
        }
    }

    // The ABI split approach will produce different apk files for the different architectures.
    // splits {
    //     abi {
    //         enable true
    //         reset()
    //         include 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a'
    //         universalApk false
    //     }
    // }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    tasks.register("buildAndPublishSampleApp") {
        group = 'zenid'
        dependsOn ":copyZenIdSDKArtifacts", "incrementVersionCode", "assembleRelease"
        tasks.named("incrementVersionCode").get().mustRunAfter(":copyZenIdSDKArtifacts")
        tasks.named("assembleRelease").get().mustRunAfter("incrementVersionCode")
        finalizedBy("appDistributionUploadRelease")
    }
}

ext {
    okHttpVersion = '3.14.9'
    retrofitVersion = '2.8.2'
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'net.sf.scuba:scuba-sc-android:0.0.23'
    implementation 'org.jmrtd:jmrtd:0.7.21'
    implementation "com.google.android.gms:play-services-tasks:18.1.0"
    implementation "com.otaliastudios.opengl:egloo:0.6.1"
    implementation fileTree(include: ['*.aar'], dir: '../libs')
    implementation files('libs/jp2-android-1.0.3.aar')
}
