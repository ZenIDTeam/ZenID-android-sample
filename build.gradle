import org.apache.commons.io.FileUtils

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:8.5.2'
        if (file("${rootDir}/basic-sample/google-services.json").exists()) {
            classpath 'com.google.gms:google-services:4.4.2'
            classpath 'com.google.firebase:firebase-appdistribution-gradle:5.0.0'
        }
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

def getZenIDVersion() {
    try {
        def output = new ByteArrayOutputStream()
        def scriptPath = file("../../Scripts/get_zenid_version.ps1").absolutePath

        def isWindows = System.getProperty('os.name').toLowerCase().contains('windows')
        def isMacOs = System.getProperty('os.name').toLowerCase().contains('mac')

        if (isWindows) {
            exec {
                commandLine 'powershell', '-NoProfile', '-ExecutionPolicy', 'Bypass', '-File', scriptPath
                standardOutput = output
            }
        } else {
            exec {
                commandLine 'pwsh', '-NoProfile', '-ExecutionPolicy', 'Bypass', '-File', scriptPath
                standardOutput = output
            }
        }

        def versionFound = output.toString().trim()

        if (versionFound.isEmpty()) {
            throw new GradleException("Version not found in PowerShell script output.")
        }

        return versionFound
    } catch (GradleException e) {
        "1.0"
    }
}

def copyZenIdSDKArtifacts() {
    def destDir = new File("${project.rootDir}/libs/")
    println "Delete libs dir: ${destDir.deleteDir()}"
    def srcDir = new File("${project.rootDir.parent}/android/Zenid_Android_XXX/artifacts/zenid_sdk")
    FileUtils.copyDirectory(srcDir, destDir)
    def olModels = new File(destDir, "sdk-core-models-ol-release.aar")
    def iqsHologram = new File(destDir, "sdk-iqs-hologram-release.aar")
    if (olModels.exists()) {
        olModels.delete()
    }
    if (iqsHologram.exists()) {
        iqsHologram.delete()
    } 
}

subprojects {
    version = getZenIDVersion()
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}

tasks.register('copyZenIdSDKArtifacts') {
    group = 'zenid'
    doLast {
        copyZenIdSDKArtifacts()
    }
}